name: MCDC Reusable Workflow

on:
  workflow_call:
    inputs:
      # Optional inputs
      app-name:
        description: Application name, if different from repo name
        type: string
        required: false
        default: ''

env:
  SIMULATION: native
  ENABLE_UNIT_TESTS: true
  OMIT_DEPRECATED: true
  BUILDTYPE: debug
  TESTS_RAN: false
  
# Force bash to apply pipefail option so pipeline failures aren't masked
defaults:
  run:
    shell: bash

jobs:
  # Checks for duplicate actions. Skips push actions if there is a matching or
  # duplicate pull-request action.
  checks-for-duplicates:
    runs-on: ubuntu-latest
    # Map a step output to a job output
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@master
        with:
          concurrent_skipping: 'same_content'
          skip_after_successful_duplicate: 'true'
          do_not_skip: '["pull_request", "workflow_dispatch", "schedule"]'

  mcdc:
    needs: checks-for-duplicates
    if: ${{ needs.checks-for-duplicates.outputs.should_skip != 'true' || contains(github.ref, 'main') }}
    name: Build and Run MCDC
    runs-on: ubuntu-latest
    container: ghcr.io/core-flight-system/mcdc:latest

    steps:        
      - name: Set up environment variables
        # Apps typically use lowercase targets and uppercase names, this logic is fragile but works
        run: |
          echo "APP_UPPER=$(echo ${{ inputs.app-name }} | sed 's/[a-z]/\U&/g')" >> $GITHUB_ENV
          echo "APP_LOWER=$(echo ${{ inputs.app-name }} | sed 's/[A-Z]/\L&/g')" >> $GITHUB_ENV

      - name: Checkout Bundle Main
        uses: actions/checkout@v4
        with:
          repository: arielswalker/cFS
          submodules: true
          ref: test-mcdc

      - name: Checkout Repo
        if: ${{ inputs.app-name != '' }}
        uses: actions/checkout@v4
        with:
          path: apps/${{  env.APP_LOWER  }}

      - name: Copy Files
        run: |
          cp ./cfe/cmake/Makefile.sample Makefile
          cp -r ./cfe/cmake/sample_defs sample_defs
       
      - name: Modify osal to include conditional coverage flags
        run: |
          sed -i 's/target_compile_options.*)/target_compile_options(ut_coverage_compile INTERFACE -pg -O0 -fprofile-arcs -ftest-coverage -fcondition-coverage -fprofile-abs-path)/' osal/src/bsp/generic-linux/CMakeLists.txt       
          sed -i 's/set(UT_COVERAGE_COMPILE_FLAGS.*)/set(UT_COVERAGE_COMPILE_FLAGS -pg --coverage -O0 -fcondition-coverage -fprofile-abs-path)/' osal/src/bsp/generic-linux/build_options.cmake
          sed -i 's/set(UT_COVERAGE_LINK_FLAGS.*)/set(UT_COVERAGE_LINK_FLAGS -pg --coverage -O0 -fcondition-coverage -fprofile-abs-path)/' osal/src/bsp/generic-linux/build_options.cmake

      - name: Add repo to build
        if: ${{ inputs.app-name != '' }}
        run: echo 'set(MISSION_GLOBAL_APPLIST ${{ inputs.app-name }})' >> sample_defs/targets.cmake
        
      - name: Make prep
        run: make prep

      - name: Make install 
        if: ${{ inputs.app-name == '' }}
        run: make install

      - name: Make test 
        if: ${{ inputs.app-name == '' }}
        run: |
          (make test VERBOSE=1 || true) | tee test_results.txt
          echo "TESTS_RAN=true" >> $GITHUB_ENV
          
      - name: Build app build dependencies
        if: ${{ inputs.app-name != '' }}
        run: make -C build/tools/elf2cfetbl
        
      - name: Build app target
        if: ${{ inputs.app-name != '' }}
        run: |
          make -C build/native/default_cpu1/apps/$APP_LOWER
          
      - name: Run app test
        if: ${{ inputs.app-name != '' }}
        run: |          
          echo "BASE_DIR=build/native/default_cpu1/apps/$APP_LOWER/unit-test" >> $GITHUB_ENV
          (cd build/native/default_cpu1/apps/$APP_LOWER; ctest --verbose || true) | tee test_results.txt 
          echo "TESTS_RAN=true" >> $GITHUB_ENV
          
      - name: Grab test modules
        # Grab test modules if tests ran, even if step failed
        if: ${{ env.TESTS_RAN == 'true' }}
        run: |
          echo "MODULES=$(grep -oP 'Test\s+#\d+: \K[\w\-\_]+(?= )' test_results.txt | tr '\n' ' ' | sed 's/ $//')" >> $GITHUB_ENV
          grep -oP 'Test #\d+: \K[\w\-\_]+' test_results.txt | tr '\n' ' ' | sed 's/ $//' >> modules.txt

      - name: Run MCDC analysis
        # Run MCDC analysis if tests ran, even if step failed
        if: ${{ env.TESTS_RAN == 'true' }}
        run: bash .github/scripts/mcdc-analyze.sh

      - name: Save PR number
        if: github.event_name == 'pull_request'
        env:
          PR_NUMBER: ${{ github.event.number }}
        run: echo $PR_NUMBER > pr_number
        
      - name: Archive unit test results
        # Archive unit test results if tests ran, even if step failed
        if: ${{ env.TESTS_RAN == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: Unit test results
          path: |
            test_results.txt
      
      - name: Archive MCDC results
        # Archive MCDC results if tests ran, even if step failed
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: MCDC results
          path: |
            **/*.gcov
            mcdc_results.txt
            pr_number
            modules.txt


  comment-mcdc:
    needs: mcdc
    if: github.event_name == 'pull_request'
    name: Comment MCDC Comparision on PR
    runs-on: ubuntu-20.04

    steps:        
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          repository: ArielSAdams/cFE
          ref: trigger-comment-yml

      - name: Download latest main branch artifact      
        uses: dawidd6/action-download-artifact@v2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          workflow: mcdc.yml
          branch: main
          name: MCDC results
          path: ./main-branch-results

      - uses: actions/download-artifact@v4
        with:
          name: MCDC results
        
      # Add step to reference new script that calculates difference between main artifact and pr artifact
      - name: Compare main and PR artifacts      
        run: |
          bash .github/scripts/mcdc-compare.sh main-branch-results/mcdc_results.txt pr_mcdc_results.txt modules.txt

      - name: Comment comparison to pull request
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
              const fs = require('fs');
              const path = require('path');
              // Adjust the path based on where you see mcdc_results.txt after running the 'ls' command
              const mcdcResultsFilePath = path.join(process.env.GITHUB_WORKSPACE, 'mcdc_comment.txt');
              // Debugging: Check if the file exists at the adjusted path
              if (!fs.existsSync(mcdcResultsFilePath)) {
                console.log('mcdc_comment.txt file not found at path: ' + mcdcResultsFilePath);
                return;
              }
              const mcdcResults = `MCDC Results:
              \`\`\`
              ${fs.readFileSync(mcdcResultsFilePath, 'utf-8')}
              \`\`\`
              `;

              // Ensure the correct path to the pr_number file after unzipping
              const prNumberPath = path.join(process.env.GITHUB_WORKSPACE, 'pr_number');
              if (!fs.existsSync(prNumberPath)) {
                console.log('pr_number file not found at path: ' + prNumberPath);
                return;
              }
              const prNumber = Number(fs.readFileSync(prNumberPath));
              const comments = await github.paginate(
                github.rest.issues.listComments,
                {
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: prNumber,
                }
              );
              comments.reverse();
              const previousComment = comments.find(comment =>
                comment.user.login === 'github-actions[bot]'
              );
              if (previousComment) {
                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: previousComment.id,
                  body: mcdcResults,
                });
              } else {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: prNumber,
                  body: mcdcResults,
                });
              }
              
      - name: Archive mcdc comparison
        # Upload if success or failure which supports skipping, unlike always()
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: MCDC main branch comparison
          path: |
            mcdc_comment.txt
            mcdc_compare.txt
